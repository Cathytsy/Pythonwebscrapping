# -*- coding: utf-8 -*-
"""Python assignment Part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXpeJl43CnzAZQtO2BHewphvuuPoqQYi
"""

pip install requests beautifulsoup4 requests-html

import pandas as pd
from urllib.parse import urlparse
import numpy as np
import nltk.data
from requests_html import HTMLSession
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt

url = requests.get('https://www.cbc.ca/news/world')
soup = BeautifulSoup(url.content, 'html.parser')

"""Scrapping keywords, taking reference from Will's code on Day6 web scrapping

"""

def parse_elements(url,element):
    session = HTMLSession()
    r = session.get(url)
    elements = r.html.find(element)
    return elements

def topic_detection(sentence):
    Israel_Keywords =('Israel','Jewish','Jews')
    Palestine_Keywords =('Gaza','Palestine','Rafah','Muslim','Palestinian')
    Hamas_Keywords= ('Hamas')
    Israel = any(sentence.count(i)>0 for i in Israel_Keywords)
    Palestine = any(sentence.count(i)>0 for i in Palestine_Keywords)
    Hamas = any(sentence.count(i)>0 for i in Hamas_Keywords)
    topics = []
    if Israel == True:
        topics.append("Israel")
    if Palestine == True:
        topics.append("Palestine")
    if Hamas == True:
        topics.append('Hamas')
    return topics

url = 'https://www.cbc.ca/news/world'
paragraphs = parse_elements(url, 'h3')
links = parse_elements(url, 'a')

type(paragraphs[0])

#requirements: print out a topic analysis after every paragraph prints out
#dictionary that has two lists, one for the paragraphs, and one for topics covered by those paragraphs
#print(paragraphs)
p_dictionary = {}
p_list = []
topic_list = []
for i in range(0, len(paragraphs)):
    if len(paragraphs[i].text) > 50:
      p_list.append(paragraphs[i].text)
      topic_list.append(topic_detection(paragraphs[i].text))
p_dictionary['Paragraphs'] = p_list
p_dictionary['Topics'] = topic_list

p_dictionary['Topics']

df = pd.DataFrame(p_dictionary)

df.head(9)

topics_amount = df['Topics'].value_counts()

print(topics_amount)

"""getting the count separately"""

df['Hamas'] = df['Topics'].apply(lambda x:1 if 'Hamas' in x else 0)

df['Palestine'] = df['Topics'].apply(lambda x:1 if 'Palestine' in x else 0)

df['Israel'] = df['Topics'].apply(lambda x:1 if 'Israel' in x else 0)

df

df.drop([0])

topic_counts = [df['Palestine'].sum(), df['Israel'].sum(),df['Hamas'].sum()]
topic_labels = ['Palestine', 'Israel', 'Hamas']

# Plotting the bar graph
plt.bar(topic_labels, topic_counts)

# Customize the plot
plt.xlabel('Topics')
plt.ylabel('Total Count')
plt.title('Total count of topics')

# Show the plot
plt.show()